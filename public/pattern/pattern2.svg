<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 19.14 202"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><defs><style>.cls-1{fill:none;stroke:#cc9f53;stroke-width:0.75px;}</style></defs><path class="cls-1" d="M19.49,103.37A70.85,70.85,0,0,0,1.69,101"/><path class="cls-1" d="M19.49,98.63A70.85,70.85,0,0,1,1.69,101"/><path class="cls-1" d="M19.44,110.77A91.19,91.19,0,0,0,.72,103.44"/><path class="cls-1" d="M19.44,91.23A91.19,91.19,0,0,1,.72,98.56"/><path class="cls-1" d="M19.39,123.19a115.45,115.45,0,0,0-19-12.47"/><path class="cls-1" d="M19.51,141.39C8.69,154-1.31,170,2.69,188c2,7,10,11,16.81,12.2"/><path class="cls-1" d="M19.39,78.81a115.45,115.45,0,0,1-19,12.47"/><path class="cls-1" d="M19.51,60.61C8.69,48-1.31,32,2.69,14c2-7,10-11,16.81-12.2"/><path class="cls-1" d="M19.52,142.25A125.51,125.51,0,0,0,.41,123.08"/><path class="cls-1" d="M.27,200.25a46.41,46.41,0,0,0,19.21-.18"/><path class="cls-1" d="M19.54,122.7A126.51,126.51,0,0,0,.37,141.33"/><path class="cls-1" d="M19.52,59.75A125.51,125.51,0,0,1,.41,78.92"/><path class="cls-1" d="M.27,1.75a46.41,46.41,0,0,1,19.21.18"/><path class="cls-1" d="M19.54,79.3A126.51,126.51,0,0,1,.37,60.67"/><path class="cls-1" d="M.49,200.28C6.69,199,12.69,196,15.69,190c7-17-4-36-15.57-48.32"/><path class="cls-1" d="M19.56,110.41A118.19,118.19,0,0,0,.18,122.83"/><path class="cls-1" d="M.49,1.72C6.69,3,12.69,6,15.69,12c7,17-4,36-15.57,48.32"/><path class="cls-1" d="M19.56,91.59A118.19,118.19,0,0,1,.18,79.17"/><path class="cls-1" d="M19.55,103.18a92.91,92.91,0,0,0-19.34,7.3"/><path class="cls-1" d="M19.55,98.82A92.91,92.91,0,0,1,.21,91.52"/><path class="cls-1" d="M17.59,101A70.22,70.22,0,0,0,.17,103.28"/><path class="cls-1" d="M17.59,101A70.22,70.22,0,0,1,.17,98.72"/></svg>